~~ Licensed to the Apache Software Foundation (ASF) under one or more
~~ contributor license agreements.  See the NOTICE file distributed with
~~ this work for additional information regarding copyright ownership.
~~ The ASF licenses this file to You under the Apache License, Version 2.0
~~ (the "License"); you may not use this file except in compliance with
~~ the License.  You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~

Data Model

  Chukwa Adaptors emit data in <Chunks>. A Chunk is a sequence of bytes,
with some metadata. Several of these are set automatically by the Agent or 
Adaptors. Two of them require user intervention: <cluster name> and 
<datatype>.  Cluster name is specified in <conf/chukwa-agent-conf.xml>,
and is global to each Agent process.  Datatype describes the expected format 
of the data collected by an Adaptor instance, and it is specified when that 
instance is started. 
		
  The following table lists the Chunk metadata fields:
		
*-------------*-------------------------------------+----------------------------------------------------------:
| Field       | Meaning                             | Source                                                   |
*-------------*-------------------------------------+----------------------------------------------------------:
| Source      | Hostname where Chunk was generated  | Automatic                                                |
*-------------*-------------------------------------+----------------------------------------------------------:
| Cluster     | Cluster host is associated with     | Specified by user in agent config                        |
*-------------*-------------------------------------+----------------------------------------------------------:
| Datatype    | Format of output                    | Specified by user when Adaptor started                   |
*-------------*-------------------------------------+----------------------------------------------------------:
| Sequence ID | Offset of Chunk in stream           | Automatic, initial offset specified when Adaptor started |
*-------------*-------------------------------------+----------------------------------------------------------:
| Name        | Name of data source                 | Automatic, chosen by Adaptor                             |
*-------------*-------------------------------------+----------------------------------------------------------:
		
  Conceptually, each Adaptor emits a semi-infinite stream of bytes, numbered
starting from zero. The sequence ID specifies how many bytes each Adaptor has
sent, including the current chunk.  So if an adaptor emits a chunk containing
the first 100 bytes from a file, the sequenceID of that Chunk will be 100. 
And the second hundred bytes will have sequence ID 200.  This may seem a 
little peculiar, but it's actually the same way that TCP sequence numbers work.
		
  Adaptors need to take sequence ID as a parameter so that they can resume 
correctly after a crash, and not send redundant data. When starting adaptors, 
it's usually save to specify 0 as an ID, but it's sometimes useful to specify 
something else. For instance, it lets you do things like only tail the second 
half of a file. 
